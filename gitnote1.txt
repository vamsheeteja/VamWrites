
$ git status
$ git init -> makes the dir a git repo.
$ git add . // adds the folders to staging area...
$ git commit -m "message" // actually commits the staged changes...

$ git log // retrieves the git log of all the commits...

''''''''''''''
atomic commits // every commit should contain on one thing fix..
paragraph commits // git commit   vs code opens
''''''''''''''


$ git log --abrev-commit // short hash code
$ git log --oneline // can see one line of each commit message 

$ git --amend // redo the prev. commit// add the missed file or sometimes fixing the commit message
see the example

'''''''''''''''''
.gitignore // files you never want to commit

.gitignore.io // cool website
''''''''''''''''''


$ git diff // command to view the CHANGES between commits, branches, files, our working directory, and more!

how it was changed over time

The git diff lists ALL the changes in our working directory that are NOT staged for the next commit

git diff shows all the unstaged changes

$ git diff HEAD // lists all changes in the working tree since your last commit,
unstaged and staged . 

$ git diff --staged or --cached
// will list the changes between the staging area and our last commit.

$ git diff --staged file.name // to know the changes in specific file only


finally 

$ git diff // only lists the changes that are UNSTAGED
$ git diff --staged or --cached // lists the changes that are STAGED ONLY
$ git diff HEAD // all commits since the last commit

// Comparing changes across Commits

$ git diff hashcode1..hashcode2
$ git diff branch1..branch2


---------------------------------------- 
$ git checkout commit-hashcode // go back to time || Detached Head mode

Now to get back to the master...

$ git switch master || git checkout master


git checkout odd feature 

$ git checkout HEAD~1 // to go back one commit before
$ git checkout HEAD~2  // 2 commits before


and then if you want to go back to the branch from where you detached head
$ git switch -

-----------------------------------------------
DISCARDING CHANGES BASICALLY ITS UNSTAGING


if you had made changes to the files and you dont want to keep them then..
you can use

$ git checkout HEAD
$ git checkout --file name.txt


// UN-MODIFYING WITH git restore
 
if you had made changes to the files and you dont want to keep them then..
(it goes to the last commit changes)
you can use

$ git restore file-name.txt // it restores the contents uding HEAD as the default source.
         But we can change that using the --source option
         
 syntax ; git restore --source HEAD~1 | or | commit-hash file-name.txt
eg 
   $ git restore --source commit-hash file-name.txt
   $ git restore --source HEAD~2 file-name.txt
   
// Unstaging files with git restore 

$ git restore flle-name.txt

if cimmited
$ git restore --staged file-name.txt

------------------------------------------------

// UNDOING COMMITS WITH git reset

1) Regular reset

$ git reset coommit-hash // it rem0ves the commits but the content will still be the same (it does not remove the changes in the working directory)

if want to remove the changes too

$ git reset --hard commit-hash

-------------------------------------------------

git revert

both gi reset and git revert "undo" changes, but they accomplish it in different ways.

reset actually moves the branch pointer backwards, eliminating commits

the mistake commits are removed permanently 


revert, instead created a brand new commit which reverses/undos the changes from a commit. Because it results in a new commit, y0u will be prompted to enter a commit message.

here the mistake commits are not removed. they are present in the history.


$ git revert commit-hash


